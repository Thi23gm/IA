import plotly.express as px
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from kneed import DataGenerator, KneeLocator
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import MinMaxScaler

# Carregar o conjunto de dados
base = pd.read_csv("dados/Iris.csv", delimiter=",")
Entrada = base.iloc[:, 0:4].values

# Normalização dos dados usando Min-Max Scaler
scaler = MinMaxScaler()
Entrada = scaler.fit_transform(Entrada)

# Calcular a Silhouette para diferentes números de clusters
limit = int((Entrada.shape[0] // 2) ** 0.5)
silhouette_scores = []
for k in range(2, limit + 1):
    model = KMeans(n_clusters=k)
    pred = model.fit_predict(Entrada)
    score = silhouette_score(Entrada, pred)
    silhouette_scores.append(score)
    print(f"Silhouette Score k = {k}: {score:.3f}")

# Plotar o gráfico de Silhouette
plt.plot(range(2, limit + 1), silhouette_scores, marker="o")
plt.xlabel("Número de Clusters")
plt.ylabel("Silhouette Score")
plt.title("Silhouette Score para diferentes números de clusters")
plt.show()

# Usar o método do cotovelo (Elbow method) para determinar o número ideal de clusters
wcss = []
for i in range(2, 11):
    kmeans = KMeans(n_clusters=i, random_state=10)
    kmeans.fit(Entrada)
    wcss.append(kmeans.inertia_)

# Plotar o gráfico do método do cotovelo
plt.plot(range(2, 11), wcss, marker="o")
plt.title("O método do cotovelo")
plt.xlabel("Número de Clusters")
plt.ylabel("SSE (Within-cluster Sum of Squares)")
plt.show()

# Encontrar o número ideal de clusters usando KneeLocator
kl = KneeLocator(range(2, 11), wcss, curve="convex", direction="decreasing")
num_clusters = kl.elbow

# Realizar o agrupamento K-Means com o número ideal de clusters
kmeans = KMeans(n_clusters=num_clusters, random_state=0)
saida_kmeans = kmeans.fit_predict(Entrada)

# Plotar os clusters
plt.scatter(
    Entrada[saida_kmeans == 0, 0],
    Entrada[saida_kmeans == 0, 1],
    s=100,
    c="purple",
    label="Cluster 1",
)
plt.scatter(
    Entrada[saida_kmeans == 1, 0],
    Entrada[saida_kmeans == 1, 1],
    s=100,
    c="orange",
    label="Cluster 2",
)
plt.scatter(
    Entrada[saida_kmeans == 2, 0],
    Entrada[saida_kmeans == 2, 1],
    s=100,
    c="green",
    label="Cluster 3",
)

# Plotar os centróides
plt.scatter(
    kmeans.cluster_centers_[:, 0],
    kmeans.cluster_centers_[:, 1],
    s=100,
    c="red",
    label="Centróides",
)
plt.legend()
plt.show()
